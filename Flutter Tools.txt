
//- Text Field
final _titleController = TextEditingController();

@override
void dispose() {
  _titleController.dispose();
  super.dispose();
}

TextField(
  controller: _titleController,
  maxLength: 50,
  //keyboardType: TextInputType.text,//TextInputType.number,
  decoration: const InputDecoration(
	//prefixText: '\$ ',
	label: Text('Title'),
  ),
),

//- Drop Down List
enum Category { food, travel, leisure, work }
Category _selectedCategory = Category.leisure;

DropdownButton(
value: _selectedCategory,
items: Category.values
.map(
  (category) => DropdownMenuItem(
	value: category,
	child: Text(
	  category.name.toUpperCase(),
	),
  ),
)
.toList(),
onChanged: (value) {
   if (value == null) {
	 return;
   }
   setState(() {
	 _selectedCategory = value;
   });
 },
),

//- Elevated Button
ElevatedButton(
  onPressed: () {},
  child: const Text('Save Expense'),
),

//- Dialog
showDialog(
  context: context,
  builder: (ctx) => AlertDialog(
	title: const Text('Dialog Title'),
	content: Text(_titleController.text),
	actions: [
	  TextButton(
		onPressed: () {
		  Navigator.pop(ctx);//close the modal
		},
		child: const Text('Done'),
	  )
	],
  ),
);

//- Date Picker
intl:
https://pub.dev/packages/intl
flutter pub add intl

final formatter = DateFormat.yMd();

DateTime? _selectedDate;
  void _presentDatePicker() async {
    final now = DateTime.now();
    final firstDate = DateTime(now.year - 1, now.month, now.day);
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: now,
      firstDate: firstDate,
      lastDate: now,
    ); //.then((value) {
    //},);
    setState(() {
      _selectedDate = pickedDate;
    });
  }

Text(
_selectedDate == null
	? 'No date selected'
	: formatter.format(_selectedDate!),
),
IconButton(
	onPressed: _presentDatePicker,
	icon: const Icon(
	Icons.calendar_month,
 ),
),

//- Icon Button
IconButton(
	onPressed: () {},
	icon: const Icon(
	Icons.calendar_month,
 ),
)

//- Text Button
TextButton.icon(
  onPressed: () {},
  style: TextButton.styleFrom(
	foregroundColor: Colors.white,
  ),
  icon: const Icon(Icons.refresh),
  label: const Text('text'),
)

//- Add Images
Image.asset(
  'assets/images/img-1.png',
  width: 200,
),

# To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/img-1.png
    - assets/images/img-2.png
    - ...

//- State Management(riverpod):
void main() {
  runApp(
    const ProviderScope(
      child: App(),
    ),
  );
}

final mealsProvider = Provider((ref) {
  return dummyMeals;
});

class TabsScreen extends ConsumerStatefulWidget {
  @override
  ConsumerState<TabsScreen> createState() {}
}

class _TabsScreenState extends ConsumerState<TabsScreen> {}

@override
Widget build(BuildContext context) {
  final meals = ref.watch(mealsProvider);
}