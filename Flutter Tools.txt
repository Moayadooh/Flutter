
//- Main Method
void main() {
  runApp(
    const MaterialApp(
      home: MyClass(),
    ),
  );
}

//- Stateful Widget
class MyClass extends StatefulWidget {
  const MyClass({super.key});

  @override
  //State<StatefulWidget> createState() {
  State<MyClass> createState() {
    return _MyClass();
  }
}

class _MyClass extends State<MyClass> {
	@override
	Widget build(BuildContext context) {
		return Scaffold(
		  body: ...
		);
	}
}

//- Text Field
final _titleController = TextEditingController();

@override
void dispose() {
  _titleController.dispose();
  super.dispose();
}

TextField(
  controller: _titleController,
  maxLength: 50,
  //keyboardType: TextInputType.text,//TextInputType.number,
  decoration: const InputDecoration(
	//prefixText: '\$ ',
	label: Text('Title'),
  ),
),

//- Drop Down List
enum Category { food, travel, leisure, work }
Category _selectedCategory = Category.leisure;

DropdownButton(
value: _selectedCategory,
items: Category.values
.map(
  (category) => DropdownMenuItem(
	value: category,
	child: Text(
	  category.name.toUpperCase(),
	),
  ),
)
.toList(),
onChanged: (value) {
   if (value == null) {
	 return;
   }
   setState(() {
	 _selectedCategory = value;
   });
 },
),

//- Elevated Button
ElevatedButton(
  onPressed: () {},
  child: const Text('Save Expense'),
),

//- Dialog
showDialog(
  context: context,
  builder: (ctx) => AlertDialog(
	title: const Text('Dialog Title'),
	content: Text(_titleController.text),
	actions: [
	  TextButton(
		onPressed: () {
		  Navigator.pop(ctx);
		},
		child: const Text('Done'),
	  )
	],
  ),
);

//- List View
ListView.builder(
  itemCount: 3,
  itemBuilder: (ctx, index) => const Dismissible(
	// background: Container(
	//   color: Theme.of(context).colorScheme.error.withOpacity(0.75),
	//   margin: EdgeInsets.symmetric(
	//     horizontal: Theme.of(context).cardTheme.margin!.horizontal,
	//   ),
	// ),
	key: ValueKey(""),
	child: Center(
	  child: Text("List Item"),
	),
	//onDismissed: (direction) {},
  ),
),
